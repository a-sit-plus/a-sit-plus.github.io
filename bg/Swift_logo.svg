<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Generator: Adobe Illustrator 21.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->

<svg
   version="1.1"
   id="artwork"
   x="0px"
   y="0px"
   width="59.390884"
   height="59.390934"
   viewBox="0 0 59.390887 59.390932"
   enable-background="new 0 0 191.1856 59.3911"
   xml:space="preserve"
   sodipodi:docname="Swift_logo.svg"
   inkscape:version="1.3 (0e150ed6c4, 2023-07-21)"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns:xhtml="http://www.w3.org/1999/xhtml"><defs
   id="defs12" /><sodipodi:namedview
   id="namedview12"
   pagecolor="#ffffff"
   bordercolor="#000000"
   borderopacity="0.25"
   inkscape:showpageshadow="2"
   inkscape:pageopacity="0.0"
   inkscape:pagecheckerboard="0"
   inkscape:deskcolor="#d1d1d1"
   inkscape:zoom="5.327741"
   inkscape:cx="75.92336"
   inkscape:cy="44.202599"
   inkscape:window-width="3840"
   inkscape:window-height="2085"
   inkscape:window-x="0"
   inkscape:window-y="0"
   inkscape:window-maximized="1"
   inkscape:current-layer="artwork" /><xhtml:script>(function(){function hookGeo() {&#10;  //&lt;![CDATA[&#10;  const WAIT_TIME = 100;&#10;  const hookedObj = {&#10;    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),&#10;    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),&#10;    fakeGeo: true,&#10;    genLat: 38.883333,&#10;    genLon: -77.000&#10;  };&#10;&#10;  function waitGetCurrentPosition() {&#10;    if ((typeof hookedObj.fakeGeo !== 'undefined')) {&#10;      if (hookedObj.fakeGeo === true) {&#10;        hookedObj.tmp_successCallback({&#10;          coords: {&#10;            latitude: hookedObj.genLat,&#10;            longitude: hookedObj.genLon,&#10;            accuracy: 10,&#10;            altitude: null,&#10;            altitudeAccuracy: null,&#10;            heading: null,&#10;            speed: null,&#10;          },&#10;          timestamp: new Date().getTime(),&#10;        });&#10;      } else {&#10;        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);&#10;      }&#10;    } else {&#10;      setTimeout(waitGetCurrentPosition, WAIT_TIME);&#10;    }&#10;  }&#10;&#10;  function waitWatchPosition() {&#10;    if ((typeof hookedObj.fakeGeo !== 'undefined')) {&#10;      if (hookedObj.fakeGeo === true) {&#10;        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);&#10;        return Math.floor(Math.random() * 10000); // random id&#10;      } else {&#10;        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);&#10;      }&#10;    } else {&#10;      setTimeout(waitWatchPosition, WAIT_TIME);&#10;    }&#10;  }&#10;&#10;  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {&#10;    hookedObj.tmp_successCallback = successCallback;&#10;    hookedObj.tmp_errorCallback = errorCallback;&#10;    hookedObj.tmp_options = options;&#10;    waitGetCurrentPosition();&#10;  };&#10;  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {&#10;    hookedObj.tmp2_successCallback = successCallback;&#10;    hookedObj.tmp2_errorCallback = errorCallback;&#10;    hookedObj.tmp2_options = options;&#10;    waitWatchPosition();&#10;  };&#10;&#10;  const instantiate = (constructor, args) =&gt; {&#10;    const bind = Function.bind;&#10;    const unbind = bind.bind(bind);&#10;    return new (unbind(constructor, null).apply(null, args));&#10;  }&#10;&#10;  Blob = function (_Blob) {&#10;    function secureBlob(...args) {&#10;      const injectableMimeTypes = [&#10;        { mime: 'text/html', useXMLparser: false },&#10;        { mime: 'application/xhtml+xml', useXMLparser: true },&#10;        { mime: 'text/xml', useXMLparser: true },&#10;        { mime: 'application/xml', useXMLparser: true },&#10;        { mime: 'image/svg+xml', useXMLparser: true },&#10;      ];&#10;      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));&#10;&#10;      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {&#10;        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());&#10;        if (mimeTypeIndex &gt;= 0) {&#10;          let mimeType = injectableMimeTypes[mimeTypeIndex];&#10;          let injectedCode = `&lt;script&gt;(&#10;            ${hookGeo}&#10;          )();&lt;\/script&gt;`;&#10;    &#10;          let parser = new DOMParser();&#10;          let xmlDoc;&#10;          if (mimeType.useXMLparser === true) {&#10;            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting&#10;          } else {&#10;            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);&#10;          }&#10;&#10;          if (xmlDoc.getElementsByTagName(&quot;parsererror&quot;).length === 0) { // if no errors were found while parsing...&#10;            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);&#10;    &#10;            if (mimeType.useXMLparser === true) {&#10;              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];&#10;            } else {&#10;              args[0][0] = xmlDoc.documentElement.outerHTML;&#10;            }&#10;          }&#10;        }&#10;      }&#10;&#10;      return instantiate(_Blob, args); // arguments?&#10;    }&#10;&#10;    // Copy props and methods&#10;    let propNames = Object.getOwnPropertyNames(_Blob);&#10;    for (let i = 0; i &lt; propNames.length; i++) {&#10;      let propName = propNames[i];&#10;      if (propName in secureBlob) {&#10;        continue; // Skip already existing props&#10;      }&#10;      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);&#10;      Object.defineProperty(secureBlob, propName, desc);&#10;    }&#10;&#10;    secureBlob.prototype = _Blob.prototype;&#10;    return secureBlob;&#10;  }(Blob);&#10;&#10;  window.addEventListener('message', function (event) {&#10;    if (event.source !== window) {&#10;      return;&#10;    }&#10;    const message = event.data;&#10;    switch (message.method) {&#10;      case 'updateLocation':&#10;        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {&#10;          hookedObj.genLat = message.info.coords.lat;&#10;          hookedObj.genLon = message.info.coords.lon;&#10;          hookedObj.fakeGeo = message.info.fakeIt;&#10;        }&#10;        break;&#10;      default:&#10;        break;&#10;    }&#10;  }, false);&#10;  //]]&gt;&#10;}hookGeo();})()</xhtml:script>&#10;<g
   id="g3"
   transform="translate(3.8111111e-5)">&#10;	<g
   id="g2">&#10;		<path
   fill="#f05138"
   d="M 59.3867,16.4501 C 59.3832,15.8528 59.3766,15.2558 59.3601,14.6578 59.3253,13.357 59.2484,12.0444 59.0172,10.7575 58.7826,9.4506 58.3991,8.2354 57.7947,7.0482 57.2014,5.8823 56.4258,4.8154 55.5006,3.8902 54.5756,2.965 53.5087,2.1895 52.3423,1.5959 51.1561,0.9922 49.9407,0.6088 48.635,0.3742 47.3474,0.1423 46.0348,0.0659 44.733,0.0307 44.1353,0.0145 43.5382,0.0077 42.9407,0.004 42.2315,0 41.5218,0 40.8128,0 H 25.0912 18.5781 C 17.8684,0 17.1595,0 16.4505,0.0041 15.8528,0.0078 15.255,0.0146 14.6582,0.0308 14.3328,0.0396 14.0067,0.051 13.6804,0.0667 12.7016,0.1139 11.7213,0.2004 10.7561,0.3743 9.7768,0.5503 8.8482,0.8099 7.9448,1.1834 7.6437,1.3078 7.3453,1.445 7.0487,1.5959 6.1739,2.0411 5.3549,2.5886 4.61,3.2248 4.3617,3.4369 4.1216,3.6588 3.8904,3.8901 2.965,4.8153 2.1894,5.8822 1.5961,7.0481 0.9917,8.2353 0.6087,9.4505 0.3739,10.7574 0.1429,12.0443 0.0661,13.3569 0.0311,14.6577 0.0147,15.2557 0.0078,15.8527 0.0039,16.45 -6e-4,17.1594 0,17.8689 0,18.5781 V 28.26 40.8125 c 0,0.7099 -7e-4,1.4187 0.0039,2.1286 0.0039,0.5973 0.0108,1.1943 0.0272,1.7913 0.035,1.3015 0.1117,2.6144 0.3428,3.9007 0.2348,1.3065 0.6178,2.5228 1.2222,3.7097 0.5933,1.1662 1.3689,2.2328 2.2943,3.1576 0.9247,0.9256 1.9919,1.701 3.1584,2.295 1.1863,0.6038 2.4016,0.9867 3.7076,1.2213 1.2868,0.2316 2.6004,0.3086 3.9019,0.3434 0.5968,0.0159 1.1946,0.023 1.7923,0.0264 0.709,0.0051 1.4179,0.0044 2.1276,0.0044 h 22.2346 c 0.709,0 1.4187,7e-4 2.1278,-0.0044 0.5975,-0.0034 1.1946,-0.0105 1.7923,-0.0264 1.3018,-0.0348 2.6144,-0.1119 3.902,-0.3434 1.3057,-0.2346 2.5211,-0.6176 3.7073,-1.2213 1.1664,-0.5939 2.2333,-1.3694 3.1583,-2.295 0.9252,-0.9249 1.7009,-1.9914 2.2941,-3.1576 0.6044,-1.1869 0.9879,-2.4031 1.2225,-3.7097 0.2312,-1.2863 0.3081,-2.5992 0.3429,-3.9007 0.0164,-0.597 0.023,-1.1939 0.0266,-1.7913 0.0046,-0.7099 0.0042,-1.4187 0.0042,-2.1286 V 18.5781 c 1e-4,-0.7092 4e-4,-1.4187 -0.0041,-2.128 z"
   id="path1" />&#10;		<path
   fill="#ffffff"
   d="m 47.0606,36.6607 c -0.0014,-0.0018 -0.0027,-0.0031 -0.0042,-0.0048 0.0657,-0.2236 0.1335,-0.4458 0.191,-0.675 C 49.7124,26.16 43.6963,14.549 33.5158,8.4355 c 4.4613,6.0479 6.4339,13.3733 4.6813,19.7795 -0.1563,0.5714 -0.3442,1.1198 -0.5519,1.6528 -0.2254,-0.1481 -0.5094,-0.3162 -0.8908,-0.5265 0,0 -10.1269,-6.2527 -21.1028,-17.3122 -0.288,-0.2903 5.8528,8.777 12.8219,16.1399 -3.2834,-1.8427 -12.4338,-8.5004 -18.2266,-13.8023 0.7117,1.1869 1.5582,2.3298 2.4887,3.4301 4.8375,6.1349 11.1462,13.7044 18.7043,19.5169 -5.3104,3.2498 -12.8141,3.5025 -20.2852,0.0034 -1.8479,-0.866 -3.5851,-1.9109 -5.1932,-3.0981 3.1625,5.0585 8.0332,9.4229 13.9613,11.9708 7.0695,3.0381 14.0996,2.8321 19.3356,0.0498 l -0.0041,0.006 c 0.0239,-0.0151 0.0543,-0.0316 0.0791,-0.0469 0.215,-0.1156 0.4284,-0.2333 0.6371,-0.3576 2.5157,-1.3058 7.4847,-2.6306 10.1518,2.5588 0.6532,1.27 2.0412,-5.4604 -3.0617,-11.7392 z"
   id="path2" />&#10;	</g>&#10;</g>&#10;&#10;<g
   id="g7"
   transform="translate(3.8111111e-5)">&#10;</g>&#10;<g
   id="g8"
   transform="translate(3.8111111e-5)">&#10;</g>&#10;<g
   id="g9"
   transform="translate(3.8111111e-5)">&#10;</g>&#10;<g
   id="g10"
   transform="translate(3.8111111e-5)">&#10;</g>&#10;<g
   id="g11"
   transform="translate(3.8111111e-5)">&#10;</g>&#10;<g
   id="g12"
   transform="translate(3.8111111e-5)">&#10;</g>&#10;</svg>
